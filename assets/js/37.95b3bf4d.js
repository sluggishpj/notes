(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{439:function(t,a,r){"use strict";r.r(a);var s=r(23),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"内存管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),r("h2",{attrs:{id:"垃圾回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),r("h3",{attrs:{id:"引用计数垃圾收集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引用计数垃圾收集"}},[t._v("#")]),t._v(" 引用计数垃圾收集")]),t._v(" "),r("p",[t._v("最初级的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。")]),t._v(" "),r("blockquote",[r("p",[t._v("限制：循环引用")])]),t._v(" "),r("h3",{attrs:{id:"标记-清除算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法"}},[t._v("#")]),t._v(" 标记-清除算法")]),t._v(" "),r("p",[t._v("这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。")]),t._v(" "),r("p",[t._v("这个算法假定设置一个叫做根（root）的对象（在 Javascript 里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。")]),t._v(" "),r("blockquote",[r("p",[t._v("所有现代浏览器都使用了标记-清除垃圾回收算法。所有对 JavaScript 垃圾回收算法的改进都是基于标记-清除算法的改进。循环引用不再是问题")])])])}),[],!1,null,null,null);a.default=e.exports}}]);