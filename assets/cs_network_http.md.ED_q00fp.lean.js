import{_ as t,c as a,a2 as i,o as e}from"./chunks/framework.Dr622ulX.js";const c=JSON.parse('{"title":"HTTP","description":"","frontmatter":{"title":"HTTP"},"headers":[],"relativePath":"cs/network/http.md","filePath":"docs/cs/network/http.md"}'),n={name:"cs/network/http.md"};function l(h,s,d,r,p,o){return e(),a("div",null,s[0]||(s[0]=[i(`<h2 id="请求和响应报文" tabindex="-1">请求和响应报文 <a class="header-anchor" href="#请求和响应报文" aria-label="Permalink to &quot;请求和响应报文&quot;">​</a></h2><h3 id="请求报文" tabindex="-1">请求报文 <a class="header-anchor" href="#请求报文" aria-label="Permalink to &quot;请求报文&quot;">​</a></h3><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">request-line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">blank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">request-body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;]</span></span></code></pre></div><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /csdnbi  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pv.csdn.net</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep-alive // 不需要每次重连，此功能为HTTP/1.1预设功能</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Keep-Alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout=20</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://passport.csdn.net</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET, POST, OPTIONS</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Credentials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,body</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 297</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no-cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json, text/javascript, */*; q=0.01</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://passport.csdn.net</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">X-Requested-With</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> XMLHttpRequest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/x-www-form-urlencoded; charset=UTF-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip, deflate</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zh-CN,zh;q=0.9,en;q=0.8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JSESSIONID=102A7097419957407303C23004B778DF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name=Professional%20Ajax&amp;publisher=Wiley</span></span></code></pre></div><blockquote><ol><li>第一行必须是一个请求行（request line），用来说明请求类型、要访问的资源以及使用的 HTTP 版本</li><li>紧接着是一个首部（header）小节，用来说明服务器要使用的附加信息。换行符是 CRLF（\\r\\n）</li><li>在首部之后是一个空行</li><li>再此之后可以添加任意的其他数据[称之为主体（body）]</li></ol></blockquote><h3 id="响应报文" tabindex="-1">响应报文 <a class="header-anchor" href="#响应报文" aria-label="Permalink to &quot;响应报文&quot;">​</a></h3><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reason-phrase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">blank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">response-body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;]</span></span></code></pre></div><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sat, 31 Dec 2005 23:59:59 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html;charset=ISO-8859-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 122</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Wrox Homepage&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- body goes here --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>在响应中唯一真正的区别在于第一行中用<strong>状态</strong>信息代替了请求信息。状态行（status line）通过提供一个状态码来说明所请求的资源情况。</p></blockquote><h2 id="http-请求方法" tabindex="-1">HTTP 请求方法 <a class="header-anchor" href="#http-请求方法" aria-label="Permalink to &quot;HTTP 请求方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的资源，并返回实体主体</td></tr><tr><td>2</td><td>HEAD</td><td>获取请求资源的响应头部信息, 并且这些头部与 HTTP GET 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据替代目标资源</td></tr><tr><td>5</td><td>DELETE</td><td>删除指定的资源</td></tr><tr><td>6</td><td>CONNECT</td><td>开启一个客户端与所请求资源之间的双向沟通的通道。它可以用来创建隧道（tunnel）</td></tr><tr><td>7</td><td>OPTIONS</td><td>用于获取目的资源所支持的通信选项</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr></tbody></table><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods" target="_blank" rel="noreferrer">HTTP Methods | MDN</a> |</p></blockquote><h3 id="options" tabindex="-1">OPTIONS <a class="header-anchor" href="#options" aria-label="Permalink to &quot;OPTIONS&quot;">​</a></h3><p>包括以下用途</p><ol><li>检测服务器所支持的请求方法，通过响应头 <code>Allow</code></li><li>CORS 的预检请求： <ul><li>预检请求报文中的 <code>Access-Control-Request-Method</code> 首部字段告知服务器实际请求所使用的 HTTP 方法；<code>Access-Control-Request-Headers</code> 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求</li><li>服务器所返回的 <code>Access-Control-Allow-Methods</code> 首部字段将所有允许的请求方法告知客户端。该首部字段与 <code>Allow</code> 类似，但只能用于涉及到 CORS 的场景中。</li></ul></li></ol><h3 id="get-vs-post" tabindex="-1">GET vs POST <a class="header-anchor" href="#get-vs-post" aria-label="Permalink to &quot;GET vs POST&quot;">​</a></h3><ol><li><code>GET</code> 无副作用，<code>POST</code>可能有</li><li><code>GET</code> 能被浏览器缓存，<code>POST</code>不能</li><li><code>GET</code> 请求参数有长度限制，<code>POST</code>没有</li><li><code>GET</code> 传输的数据只能是 ASCII 字符，<code>POST</code>可以是二进制文件</li><li><code>GET</code> 安全性较弱 <ul><li>安全的方法除了 <code>GET</code> 之外还有：<code>HEAD</code>、<code>OPTIONS</code>。</li><li>不安全的方法除了 <code>POST</code> 之外还有 <code>PUT</code>、<code>DELETE</code>。</li></ul></li></ol><h2 id="http-状态码" tabindex="-1">HTTP 状态码 <a class="header-anchor" href="#http-状态码" aria-label="Permalink to &quot;HTTP 状态码&quot;">​</a></h2><h3 id="_100-199-信息性状态码" tabindex="-1">100 ~ 199 信息性状态码 <a class="header-anchor" href="#_100-199-信息性状态码" aria-label="Permalink to &quot;100 ~ 199 信息性状态码&quot;">​</a></h3><ul><li><code>101 Switching Protocol</code>:该代码是响应客户端的 <code>Upgrade</code> 请求头，并且指示服务器也正在切换的协议。<code>websocket</code> 建立连接过程的请求报文就有用到</li></ul><h3 id="_200-299-成功状态码" tabindex="-1">200 ~ 299 成功状态码 <a class="header-anchor" href="#_200-299-成功状态码" aria-label="Permalink to &quot;200 ~ 299 成功状态码&quot;">​</a></h3><table tabindex="0"><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td><strong>200 OK</strong></td><td>成功</td></tr><tr><td><strong>204 No Content</strong></td><td>服务器成功处理了请求，但不返回任何实体内容</td></tr><tr><td><strong>206 Partial Content</strong></td><td>表示请求已成功，并且主体包含所请求的数据区间，该数据区间是在请求的 <code>Range</code> 首部指定的</td></tr></tbody></table><h3 id="_300-399-重定向状态码" tabindex="-1">300 ~ 399 重定向状态码 <a class="header-anchor" href="#_300-399-重定向状态码" aria-label="Permalink to &quot;300 ~ 399 重定向状态码&quot;">​</a></h3><table tabindex="0"><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td><strong>301 Moved Permanently</strong></td><td>永久重定向，目标请求资源的 URI 已被永久改变，响应的 Location 首部应该包含资源现在所在的 URI</td></tr><tr><td><strong>302 Found</strong></td><td>临时重定向，目标请求资源的 URI 被临时改变。客户端使用 Location 首部给出的 URI 来临时定位资源。将来的请求仍应使用老的 URI</td></tr><tr><td><strong>304 Not Modified</strong></td><td>表明没必要再传输请求过的资源，直接使用缓存通常发生在：无副作用的请求(如 GET/HEAD) 或 使用了 <code>If-None-Match/If-Modified-Since</code> 请求头。与此等价的<strong>200OK</strong>响应应该包含以下任一响应头：<code>Cache-Control</code>, <code>Content-Location</code>, <code>Date</code>, <code>ETag</code>, <code>Expires</code>, <code>Vary</code></td></tr></tbody></table><h3 id="_400-499-客户端错误状态码" tabindex="-1">400 ~ 499 客户端错误状态码 <a class="header-anchor" href="#_400-499-客户端错误状态码" aria-label="Permalink to &quot;400 ~ 499 客户端错误状态码&quot;">​</a></h3><table tabindex="0"><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td><strong>400 Bad Request</strong></td><td>语义有误，当前请求无法被服务器理解。或请求参数有误</td></tr><tr><td><strong>401 Unauthorized</strong></td><td>当前请求需要用户验证，比如未登录</td></tr><tr><td><strong>403 Forbidden</strong></td><td>服务器已经理解请求，但是拒绝执行它，比如没权限</td></tr><tr><td><strong>404 Not Found</strong></td><td></td></tr><tr><td><strong>405 Method Not Allowed</strong></td><td>请求行中指定的请求方法不能被用于请求相应的资源</td></tr><tr><td><strong>408 Request Timeout</strong></td><td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送</td></tr><tr><td><strong>413 Payload Too Large</strong></td><td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围</td></tr><tr><td><strong>415 Unsupported Media Type</strong></td><td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝</td></tr><tr><td><strong>429 Too Many Requests</strong></td><td>用户在给定的时间内发送了太多请求（“限制请求速率”）</td></tr></tbody></table><h3 id="_500-599-服务器错误状态码" tabindex="-1">500 ~ 599 服务器错误状态码 <a class="header-anchor" href="#_500-599-服务器错误状态码" aria-label="Permalink to &quot;500 ~ 599 服务器错误状态码&quot;">​</a></h3><table tabindex="0"><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td><strong>500 Internal Server Error</strong></td><td>服务器出问题了</td></tr><tr><td><strong>501 Not Implemented</strong></td><td>此请求方法不被服务器支持且无法被处理</td></tr><tr><td><strong>502 Bad Gateway</strong></td><td>作为网关或代理角色的服务器，从上游服务器（如 tomcat、php-fpm）中接收到的响应是无效的</td></tr><tr><td><strong>503 Service Unavailable</strong></td><td>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机</td></tr><tr><td><strong>504 Gateway Timeout</strong></td><td>当服务器作为网关，不能及时得到响应时返回此错误代码</td></tr></tbody></table><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noreferrer">HTTP Status | MDN</a></p></blockquote><h2 id="http2" tabindex="-1">HTTP2 <a class="header-anchor" href="#http2" aria-label="Permalink to &quot;HTTP2&quot;">​</a></h2><p>HTTP 默认使用端口 80</p><p>新增以下特性</p><table tabindex="0"><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>多路复用</td><td>允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息，对比 HTTP1.x，可以极大减少 三次握手&amp;慢启动带来的延迟。以及速度不在受限于浏览器限制了每个域名只能建立 4-8 个连接</td></tr><tr><td>HTTP 首部压缩</td><td>HPACK 压缩格式压缩请求和响应头元数据。详见下方小节</td></tr><tr><td>服务端推送</td><td>在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。</td></tr><tr><td>二进制分帧层</td><td>这里所谓的“层”，指的是位于套接字接口与应用可见的高级 HTTP API 之间一个经过优化的新编码机制: HTTP 的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的编码方式变了。 HTTP/1.x 协议以换行符作为纯文本的分隔符，而 HTTP/2 将所有传输的信息分割为更小的消息和帧，并采用二进制格式对它们编码。</td></tr></tbody></table><h3 id="首部压缩" tabindex="-1">首部压缩 <a class="header-anchor" href="#首部压缩" aria-label="Permalink to &quot;首部压缩&quot;">​</a></h3><p>HPACK 压缩格式压缩请求和响应头元数据。这种格式使用以下技术</p><p>这种格式使用以下技术：</p><ol><li>这种格式支持通过静态<strong>霍夫曼编码</strong>对传输的头部字段进行编码</li><li>这种格式要求客户端和服务器同时维护和更新一个包含之前见过的<strong>头部字段的索引列表</strong>（换句话说，它可以建立一个共享的压缩上下文），此列表随后会用作参考，对之前传输的值进行有效编码。</li></ol><p>利用霍夫曼编码，可以在传输时对各个值进行压缩，而利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的标头键值对。</p><blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/http2" target="_blank" rel="noreferrer">http2 | GoogleDevelopers</a></p></blockquote><h2 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h2><p>默认使用端口 443</p><p>https 与 http 的区别就是： 在请求前，会建立 ssl 链接，确保接下来的通信都是加密的，无法被轻易截取分析</p><h3 id="ssl-tls-的握手流程" tabindex="-1">SSL/TLS 的握手流程 <a class="header-anchor" href="#ssl-tls-的握手流程" aria-label="Permalink to &quot;SSL/TLS 的握手流程&quot;">​</a></h3><p>此过程是<strong>非对称加密</strong>，结束后双方都有 相同秘钥</p><p><img src="https://f000.backblazeb2.com/file/j-assets/Ssl_handshake_with_two_way_authentication_with_certificates.png" alt=""></p><blockquote><p><a href="https://upload.wikimedia.org/wikipedia/commons/e/e5/Ssl_handshake_with_two_way_authentication_with_certificates.png" target="_blank" rel="noreferrer">图片来源</a></p></blockquote><h3 id="对称加密交换信息" tabindex="-1">对称加密交换信息 <a class="header-anchor" href="#对称加密交换信息" aria-label="Permalink to &quot;对称加密交换信息&quot;">​</a></h3><p>上图中的 Phase 4。 在握手过程中 获得了同一秘钥，之后双方都是 用该秘钥 加密和解密 交换信息，该过程是 <strong>对称加密</strong></p><h2 id="http-缓存" tabindex="-1">HTTP 缓存 <a class="header-anchor" href="#http-缓存" aria-label="Permalink to &quot;HTTP 缓存&quot;">​</a></h2><h3 id="本地缓存-强缓存" tabindex="-1">本地缓存（强缓存） <a class="header-anchor" href="#本地缓存-强缓存" aria-label="Permalink to &quot;本地缓存（强缓存）&quot;">​</a></h3><p>先在本地查找该资源，如果有发现该资源，而且该资源还没有过期，就使用这一个资源，完全不会发送 http 请求到服务器。体现在浏览器就是 <code>disk cache</code> &amp; <code>memory cache</code>。</p><p>由 <code>Expires</code> 和 <code>Cache-Control</code> 响应头控制</p><ul><li><code>Expires</code>: 服务端配置的，过期时间，GMT 绝对时间。被 <code>Cache-Control</code>的<code>max-age</code>覆盖。如果客户端时间和服务端不同步，可能缓存无法准确生效/失效</li><li><code>Cache-Control</code>: <ul><li><code>max-age</code>: 单位 s</li><li><code>no-cache</code>: 要求缓存把请求提交给原始服务器进行验证(协商缓存验证)</li><li><code>no-store</code>: 不使用任何缓存</li><li><code>must-revalidate</code>: 一旦资源过期，在成功向原始服务器验证之前，缓存不能用该资源响应后续请求</li></ul></li></ul><h3 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h3><p>如果在本地缓存找到对应的资源，但是不知道该资源是否过期或者已经过期，则发一个 http 请求到服务器,然后服务器判断这个请求，如果请求的资源在服务器上没有改动过，则返回 <strong>304</strong></p><p>由 <code>Last-Modified(响应头) &amp; If-modified-since(请求头)</code> 和 <code>Etag(响应头) &amp; If-None-Match(请求头)</code> 控制</p><ul><li><code>Last-Modified</code>: 对象的最后修改时间，只能精确到 1s 以内</li><li><code>Etag</code>: 可以理解为是 URL 和文件内容的 hash，没有 1s 精确度的限制</li></ul><p>协商缓存在 某些操作&amp;一定时间内 也会直接取本地缓存，表现出来就跟命中强缓存一样(from disk cache/memory cache)。</p><p>直接取缓存的有效期为 <code>((响应头Date||收到响应时间)-Last-Modified时间)/10</code>。详细可以看<a href="https://chromium.googlesource.com/chromium/src/+/refs/tags/93.0.4577.82/net/http/http_response_headers.cc#1003" target="_blank" rel="noreferrer">chrome 源码&amp;注释</a></p><blockquote><p><a href="https://juejin.cn/post/7011331644686598152" target="_blank" rel="noreferrer">https://juejin.cn/post/7011331644686598152</a></p></blockquote><h2 id="ref" tabindex="-1">REF <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;REF&quot;">​</a></h2><blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/http2" target="_blank" rel="noreferrer">https://developers.google.com/web/fundamentals/performance/http2</a></p><p>《HTTP 权威指南》</p></blockquote>`,62)]))}const g=t(n,[["render",l]]);export{c as __pageData,g as default};
