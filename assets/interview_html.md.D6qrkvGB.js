import{_ as a,c as i,a2 as s,o as e}from"./chunks/framework.Dr622ulX.js";const k=JSON.parse('{"title":"HTML","description":"","frontmatter":{"title":"HTML"},"headers":[],"relativePath":"interview/html.md","filePath":"docs/interview/html.md"}'),l={name:"interview/html.md"};function n(h,t,r,d,o,p){return e(),i("div",null,t[0]||(t[0]=[s('<h2 id="doctype-有什么用" tabindex="-1"><code>DOCTYPE</code> 有什么用 <a class="header-anchor" href="#doctype-有什么用" aria-label="Permalink to &quot;`DOCTYPE` 有什么用&quot;">​</a></h2><p><code>DOCTYPE</code> 是“document type”的缩写。它是 HTML 中用来区分<strong>标准模式</strong>和<strong>怪异模式</strong>的声明，添加后浏览器将使用标准模式渲染页面。不添加则会使用不同的渲染模式，该渲染模式不符合某些规范。</p><p><strong>确保在页面开始处添加<code>&lt;!DOCTYPE html&gt;</code>即可</strong></p><blockquote><p><a href="https://html.spec.whatwg.org/multipage/syntax.html#the-doctype" target="_blank" rel="noreferrer">https://html.spec.whatwg.org/multipage/syntax.html#the-doctype</a></p></blockquote><h2 id="什么是-data-属性" tabindex="-1">什么是 <code>data-</code> 属性 <a class="header-anchor" href="#什么是-data-属性" aria-label="Permalink to &quot;什么是 `data-` 属性&quot;">​</a></h2><p>可以把额外数据存储在 DOM 自身中</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strawberry-plant&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-fruit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>可以使用 <code>getAttribute(&#39;data-xx&#39;)</code> 或 <code>dataset[&#39;xx&#39;]</code> 获取对应属性</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;strawberry-plant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data-fruit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;12&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plant.dataset.fruit </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 12</span></span></code></pre></div><h2 id="为什么最好把-css-的-link-标签放在-head-head-之间-为什么最好把-js-的-script-标签恰好放在-body-之前-有例外情况吗" tabindex="-1">为什么最好把 CSS 的<code>&lt;link&gt;</code>标签放在<code>&lt;head&gt;&lt;/head&gt;</code>之间？为什么最好把 JS 的<code>&lt;script&gt;</code>标签恰好放在<code>&lt;/body&gt;</code>之前，有例外情况吗？ <a class="header-anchor" href="#为什么最好把-css-的-link-标签放在-head-head-之间-为什么最好把-js-的-script-标签恰好放在-body-之前-有例外情况吗" aria-label="Permalink to &quot;为什么最好把 CSS 的`&lt;link&gt;`标签放在`&lt;head&gt;&lt;/head&gt;`之间？为什么最好把 JS 的`&lt;script&gt;`标签恰好放在`&lt;/body&gt;`之前，有例外情况吗？&quot;">​</a></h2><h3 id="把-link-放在-head-中" tabindex="-1">把<code>&lt;link&gt;</code>放在<code>&lt;head&gt;</code>中 <a class="header-anchor" href="#把-link-放在-head-中" aria-label="Permalink to &quot;把`&lt;link&gt;`放在`&lt;head&gt;`中&quot;">​</a></h3><p><strong>为了逐步呈现页面</strong>。因为将样式表放在文档底部附近，会使许多浏览器（包括 Internet Explorer）不能逐步呈现页面。一些浏览器会<strong>阻止渲染</strong>直到 CSS 下载完毕，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。</p><h3 id="把-script-标签恰好放在-body-之前" tabindex="-1">把<code>&lt;script&gt;</code>标签恰好放在<code>&lt;/body&gt;</code>之前 <a class="header-anchor" href="#把-script-标签恰好放在-body-之前" aria-label="Permalink to &quot;把`&lt;script&gt;`标签恰好放在`&lt;/body&gt;`之前&quot;">​</a></h3><p>脚本在下载和执行期间会阻止 HTML 解析。把<code>&lt;script&gt;</code>标签放在底部，保证 HTML 首先完成解析，将页面尽早呈现给用户。</p><p>例外情况是脚本里包含<code>document.write()</code>时。但是现在，document.write()不推荐使用。同时，将<code>&lt;script&gt;</code>标签放在底部，意味着浏览器不能开始下载脚本，直到整个文档（document）被解析。也许，对此比较好的做法是，<code>&lt;script&gt;</code>使用异步加载。</p><h2 id="什么是渐进式渲染-progressive-rendering" tabindex="-1">什么是渐进式渲染（progressive rendering）？ <a class="header-anchor" href="#什么是渐进式渲染-progressive-rendering" aria-label="Permalink to &quot;什么是渐进式渲染（progressive rendering）？&quot;">​</a></h2><p>渐进式渲染是用于提高网页性能（尤其是提高用户感知的加载速度），以尽快呈现页面的技术。</p><ul><li>图片懒加载</li><li>确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的 CSS、脚本和内容</li><li>服务端渲染</li><li>异步加载，分块请求</li></ul><h2 id="ref" tabindex="-1">REF <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;REF&quot;">​</a></h2><blockquote><p><a href="https://github.com/yangshun/front-end-interview-handbook" target="_blank" rel="noreferrer">https://github.com/yangshun/front-end-interview-handbook</a></p></blockquote>',20)]))}const g=a(l,[["render",n]]);export{k as __pageData,g as default};
