import{_ as n,c as h,j as s,a as e,b as o,w as a,a3 as d,a2 as p,B as r,o as t,G as k}from"./chunks/framework.Dr622ulX.js";const C=JSON.parse('{"title":"DOM","description":"","frontmatter":{"title":"DOM"},"headers":[],"relativePath":"frontend/browser/dom.md","filePath":"docs/frontend/browser/dom.md"}'),c={name:"frontend/browser/dom.md"};function g(E,i,u,m,y,b){const l=r("Mermaid");return t(),h("div",null,[i[1]||(i[1]=s("h1",{id:"dom",tabindex:"-1"},[e("DOM "),s("a",{class:"header-anchor",href:"#dom","aria-label":'Permalink to "DOM"'},"​")],-1)),i[2]||(i[2]=s("h2",{id:"概述",tabindex:"-1"},[e("概述 "),s("a",{class:"header-anchor",href:"#概述","aria-label":'Permalink to "概述"'},"​")],-1)),i[3]||(i[3]=s("p",null,"Document 和 Element 继承自接口 Node。 所有 Document 对象下的对象都继承自 Element，包括 HTMLElement 和 SVGElement。",-1)),i[4]||(i[4]=s("p",null,"HTMLElment 接口是所有 HTML 元素的基本接口，而 SVGElement 接口是所有 SVG 元素的基础。",-1)),(t(),o(d,null,{default:a(()=>[k(l,{id:"mermaid-12",class:"mermaid",graph:"classDiagram%0A%09Node%20%3C%7C--%20Element%0A%09Node%20%3C%7C--%20Document%0A%09Element%20%3C%7C--%20HTMLElment%0A%09Element%20%3C%7C--%20SVGElement%0A%20%20class%20Node%7B%0A%09%09%2BNumber%20nodeType%0A%20%20%20%20%2BString%20nodeName%0A%09%09%2BcloneNode()%0A%09%09%2Bcontains()%0A%09%7D%0A%20%20class%20Document%7B%0A%20%20%20%20%2BHTMLElment%20body%0A%20%20%20%20%2BgetElementById()%0A%20%20%7D%0A%20%20class%20Element%7B%0A%20%20%20%20%2BArray%20classList%0A%20%20%20%20%2BNumber%20clientHeight%0A%20%20%20%20%2BgetAttribute()%0A%20%20%20%20%2BscrollTo()%0A%20%20%20%20%2BgetElementsByClassName()%0A%20%20%20%20%2BquerySelector()%0A%20%20%20%20%2BquerySelectorAll()%0A%20%20%7D%0A"})]),fallback:a(()=>i[0]||(i[0]=[e(" Loading... ")])),_:1})),i[5]||(i[5]=p(`<blockquote><p>不列出全部方法&amp;属性&amp;事件，只列举部分，下同</p></blockquote><h2 id="节点-node" tabindex="-1">节点 Node <a class="header-anchor" href="#节点-node" aria-label="Permalink to &quot;节点 Node&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li>nodeType</li><li>nodeName</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;img&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img.nodeName</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;IMG&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img.nodeType</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span></code></pre></div><blockquote><p>nodeType 为 1，说明是 ELEMENT_NODE，还有其他节点类型，比如文本节点 3 (TEXT_NODE)，注释节点 8 (COMMENT_NODE) 等。</p></blockquote><ul><li>firstChild</li><li>lastChild</li><li>previousSibling</li><li>nextSibling</li><li>parentNode</li><li>childNodes: 该节点所有子节点的实时的 <code>NodeList</code></li></ul><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li><code>cloneNode()</code>: 接受一个布尔值参数，表示是否执行深复制。在参数为 true 的情况下，执行深复制，也就是复制节点及其整个子节点树；在参数为 false 的情况下，执行浅复制，即只复制节点本身。</li><li><code>contains()</code>: 判断传入的节点是否是自己的后代。</li><li><code>appendChild()</code></li><li><code>removeChild()</code></li><li><code>replaceChild()</code></li></ul><h2 id="element" tabindex="-1">Element <a class="header-anchor" href="#element" aria-label="Permalink to &quot;Element&quot;">​</a></h2><h3 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li>classList</li><li>className</li><li>clientHeight</li><li>clientLeft</li><li>innerHTML</li><li>Element.classList：只读属性，返回一个元素的类属性的实时 <code>DOMTokenList</code>集合 <ul><li><strong>add( String [, String] )</strong>：添加指定的类值。如果这些类已经存在于元素的属性中，那么它们将被忽略。</li><li><strong>remove( String [,String] )</strong>：删除指定的类值。</li><li><strong>item</strong> ( Number )：按集合中的索引返回类值。</li><li><strong>toggle</strong> ( String [, force] )：当只有一个参数时：切换 class value; 即如果类存在，则删除它并返回 false，如果不存在，则添加它并返回 true。当存在第二个参数时：如果第二个参数的计算结果为 true，则添加指定的类值，如果计算结果为 false，则删除它</li><li>contains( String )：检查元素的类属性中是否存在指定的类值。</li></ul></li><li>outerHTML：在读模式下， outerHTML 返回调用它的元素及所有子节点的 HTML 标签。在写模式下，outerHTML 会根据指定的 HTML 字符串创建新的 DOM 子树，然后用这个 DOM 子树完全替换调用元素</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.outerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;p&gt;This is a paragraph.&lt;/p&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is a paragraph.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.parentNode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, div)</span></span></code></pre></div><h3 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li><code>removeAttribute()</code></li><li><code>scrollTo()</code></li><li><code>querySelector()</code>: 返回匹配的第 1 个元素/null</li><li><code>querySelectorAll()</code></li><li><code>getBoundingClientRect()</code></li><li><code>getElementsByClassName()</code><ul><li>返回一个数组，其中包含类名为 class 的所有元素。还可以查找那些怒<strong>带有多个类名</strong> 的元素，要指定多个类名，只要在字符串参数中用<strong>空格分割类名</strong>即可。Eg. <code>document.getElementsByClassName(&quot;important sale&quot;)</code> 获得同时带有&quot;important&quot; 和&quot;sale&quot;的元素。</li></ul></li><li><code>getAttribute()</code>，通过使用<code>.属性名</code>达到<code>getAttribute(属性名)</code>的效果</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> somePic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;href&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sameSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> somePic.href</span></span></code></pre></div><blockquote><p>当链接是绝对地址时，两者等价。当链接是相对地址时，somePic.href 会将相对地址转换为绝对地址。而 getAttribute(&#39;href&#39;)则依旧返回标签里的 href 属性，不做任何改变</p></blockquote><ul><li><code>getBoundingClientRect()</code> 方法，包含 4 个属性： left 、 top 、 right 和 bottom。这些属性给出了元素在页面中相对于视口的位置，不管有没有进行设置</li></ul><h3 id="元素大小" tabindex="-1">元素大小 <a class="header-anchor" href="#元素大小" aria-label="Permalink to &quot;元素大小&quot;">​</a></h3><p><img src="https://s1.ax1x.com/2020/11/09/BHXZpd.png" alt="BHXZpd.png"><img src="https://s1.ax1x.com/2020/11/09/BHXe1A.png" alt="BHXe1A.png"><img src="https://s1.ax1x.com/2020/11/09/BHXm6I.png" alt="BHXm6I.png"></p><h2 id="document" tabindex="-1">Document <a class="header-anchor" href="#document" aria-label="Permalink to &quot;Document&quot;">​</a></h2><p><code>Document</code> 接口描述了任何类型的文档的通用属性与方法。根据不同的文档类型（例如 HTML、XML、SVG，...），还能使用更多 API：使用 <code>&quot;text/html&quot;</code> 作为内容类型（content type）的 HTML 文档，还实现了 <code>HTMLDocument</code> 接口，而 XML 和 SVG 文档则（额外）实现了 <code>XMLDocument</code> 接口。</p><h3 id="属性-2" tabindex="-1">属性 <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li><code>Document.body</code></li><li><code>Document.hidden</code></li></ul><h4 id="htmldocument-的扩展" tabindex="-1">HTMLDocument 的扩展 <a class="header-anchor" href="#htmldocument-的扩展" aria-label="Permalink to &quot;HTMLDocument 的扩展&quot;">​</a></h4><ul><li><code>Document.documentElement</code>获取的是<code>&lt;html&gt;</code>结点</li><li><code>Document.cookie</code></li><li><code>Document.domain</code></li><li><code>Document.location</code></li><li><code>Document.title</code></li><li><code>Document.readyState</code>：当这个属性的值变化时，document 对象上的<code>readystatechange</code> 事件将被触发 <ul><li>loading ：<code>document</code>仍在加载</li><li>interactive：文档已经完成加载，文档已被解析，但是诸如图像，样式表和框架之类的子资源仍在加载。</li><li>complete：文档和所有子资源已完成加载。状态表示 <code>load</code> 事件即将被触发。</li></ul></li><li><code>document.hasFocus()</code> 方法，用于确定文档是否获得了焦点，失去页面焦点就会变为 false（失去焦点包括：离开当前页面，点击搜索栏，焦点在控制面板里）</li></ul><h4 id="自定义数据属性" tabindex="-1">自定义数据属性 <a class="header-anchor" href="#自定义数据属性" aria-label="Permalink to &quot;自定义数据属性&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myDiv&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-myname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nicholas&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-appid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>获取自定义属性的值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myDiv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取得自定义属性的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.dataset.myname</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.dataset.appid</span></span></code></pre></div><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><ul><li><code>Document.onreadystatechange</code></li><li><code>Document.onvisibilitychange</code></li></ul><h2 id="other" tabindex="-1">Other <a class="header-anchor" href="#other" aria-label="Permalink to &quot;Other&quot;">​</a></h2><h3 id="追加-classname" tabindex="-1">追加 className <a class="header-anchor" href="#追加-classname" aria-label="Permalink to &quot;追加 className&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elem.className) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elem.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;other-class&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elem.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; other-class&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="获取修改元素样式-elem-style" tabindex="-1">获取修改元素样式：<code>elem.style</code> <a class="header-anchor" href="#获取修改元素样式-elem-style" aria-label="Permalink to &quot;获取修改元素样式：\`elem.style\`&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).style.background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;blue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;background:blue;width: 400px;&#39;</span></span></code></pre></div><p>将所有改变合并在一起执行，只修改 DOM 一次。可通过使用 cssText 属性实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mydiv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.style.cssText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;border-left: 1px; border-right: 2px; padding: 5px;&#39;</span></span></code></pre></div><h3 id="使用特定容器元素进行包装的问题元素" tabindex="-1">使用特定容器元素进行包装的问题元素 <a class="header-anchor" href="#使用特定容器元素进行包装的问题元素" aria-label="Permalink to &quot;使用特定容器元素进行包装的问题元素&quot;">​</a></h3><ul><li><code>&lt;option&gt;</code> and <code>&lt; optgroup&gt;</code> need to be contained in a <code>&lt;select multiple=&quot;multiple&quot;&gt;...&lt;/select&gt;</code></li><li><code>&lt;legend&gt;</code> needs to be contained in a <code>&lt;fieldset&gt;...&lt;/fieldset&gt;</code></li><li><code>&lt;thead&gt;</code> , <code>&lt; tbody&gt;</code> , <code>&lt; tfoot&gt;</code> , <code>&lt; colgroup&gt;</code> , and <code>&lt; caption&gt;</code> need to be contained in a<code>&lt;table&gt;...&lt;/table&gt;</code></li><li><code>&lt;tr&gt;</code> needs to be in a <code>&lt;table&gt;&lt;thead&gt;...&lt;/thead&gt;&lt;/table&gt;</code> , <code>&lt;table&gt;&lt;tbody&gt;...&lt;/tbody&gt;&lt;/table&gt;</code> , or <code>&lt;table&gt;&lt;tfoot&gt;...&lt;/tfoot&gt;&lt;/table&gt;</code></li><li><code>&lt;td&gt;</code> and <code>&lt;th&gt;</code> need to be in a <code>&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;...&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></li><li><code>&lt;col&gt;</code> must be in a <code>&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;colgroup&gt;...&lt;/colgroup&gt;&lt;/table&gt;</code></li><li><code>&lt;link&gt;</code> and <code>&lt;script&gt;</code> need to be in a <code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;</code></li></ul><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Node</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Element</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Document</a></p></blockquote>`,42))])}const A=n(c,[["render",g]]);export{C as __pageData,A as default};
