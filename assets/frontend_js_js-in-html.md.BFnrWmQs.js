import{_ as i,c as t,a2 as a,o as l}from"./chunks/framework.Dr622ulX.js";const o=JSON.parse('{"title":"在HTML中使用JS","description":"","frontmatter":{"title":"在HTML中使用JS"},"headers":[],"relativePath":"frontend/js/js-in-html.md","filePath":"docs/frontend/js/js-in-html.md"}'),n={name:"frontend/js/js-in-html.md"};function e(h,s,p,k,r,d){return l(),t("div",null,s[0]||(s[0]=[a(`<h1 id="在html中使用js" tabindex="-1">在HTML中使用JS <a class="header-anchor" href="#在html中使用js" aria-label="Permalink to &quot;在HTML中使用JS&quot;">​</a></h1><h2 id="script" tabindex="-1"><code>&lt;script&gt;</code> <a class="header-anchor" href="#script" aria-label="Permalink to &quot;\`&lt;script&gt;\`&quot;">​</a></h2><ol><li><p>带有 src 属性的 <code>&lt;script&gt;</code> 元素不应该在其 <code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 标签之间再包含额外的 JavaScript 代码。如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。</p></li><li><p>无论如何包含代码，只要不存在 <code>defer</code> 和 <code>async</code> 属性，浏览器都会按照 <code>&lt;script&gt;</code> 元素在页面中出现的先后顺序对它们依次进行解析。换句话说，在第一个 <code>&lt;script&gt;</code> 元素包含的代码解析完成后，第二个 <code>&lt;script&gt;</code> 包含的代码才会被解析，然后才是第三个、第四个……</p></li><li><p>在文档的 <code>&lt;head&gt;</code> 元素中包含所有 JavaScript 文件，意味着必须等到全部 JavaScript 代码都被下载、解析和执行完成以后，才能开始呈现页面的内容（浏览器在遇到 <code>&lt;body&gt;</code> 标签时才开始呈现内容）。对于那些需要很多 JavaScript 代码的页面来说，这无疑会导致浏览器在呈现页面时出现明显的延迟，而延迟期间的浏览器窗口中将是一片空白。为了避免这个问题，可以把 JavaScript 引用放在 <code>&lt;body&gt;</code> 元素中页面内容的后面</p></li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Example HTML Page&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 这里放内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example1.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example2.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="4"><li><code>&lt;noscript&gt;</code> 元素，用以在不支持 JavaScript 的浏览器中显示替代的内容。这个元素可以包含能够出现在文档 <code>&lt;body&gt;</code> 中的任何 HTML 元素—— <code>&lt;script&gt;</code> 元素除外。包含在 <code>&lt;noscript&gt;</code> 元素中的内容只有在下列情况下才会显示出来： <ul><li>浏览器不支持脚本；</li><li>浏览器支持脚本，但脚本被禁用。</li></ul></li></ol><h3 id="defer-async" tabindex="-1">defer, async <a class="header-anchor" href="#defer-async" aria-label="Permalink to &quot;defer, async&quot;">​</a></h3><ol><li><p><code>&lt;script&gt;</code> 标签定义了 defer 属性。这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，<strong>脚本会被延迟到整个页面都解析完毕后再运行</strong>，相当于告诉浏览器立<strong>即下载，但延迟执行</strong>。延迟脚本总是按照指定它们的<strong>顺序执行</strong>，只适用于<strong>外部脚本</strong></p></li><li><p>与 defer 类似， async 只适用于<strong>外部脚本</strong>文件，并告诉浏览器<strong>立即下载文件并执行</strong>。但与 defer 不同的是，标记为 async 的脚本并<strong>不保证按照指定它们的先后顺序执行</strong>。第二个脚本文件可能会在第一个脚本文件之前执行。</p></li></ol><p><img src="https://s1.ax1x.com/2020/08/07/ahemhq.png" alt="ahemhq.png"></p><blockquote><p><a href="https://html.spec.whatwg.org/multipage/scripting.html" target="_blank" rel="noreferrer">https://html.spec.whatwg.org/multipage/scripting.html</a></p></blockquote>`,9)]))}const c=i(n,[["render",e]]);export{o as __pageData,c as default};
